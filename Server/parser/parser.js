/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,18],$V2=[1,9],$V3=[1,10],$V4=[1,12],$V5=[1,24],$V6=[1,13],$V7=[1,14],$V8=[1,15],$V9=[1,16],$Va=[1,17],$Vb=[1,20],$Vc=[1,21],$Vd=[1,22],$Ve=[1,23],$Vf=[1,25],$Vg=[5,9,13,15,17,22,23,25,27,28,30,31,35,37,38,39,40],$Vh=[1,30],$Vi=[1,39],$Vj=[1,31],$Vk=[1,32],$Vl=[1,36],$Vm=[1,38],$Vn=[1,40],$Vo=[1,41],$Vp=[1,42],$Vq=[1,43],$Vr=[1,44],$Vs=[1,58],$Vt=[1,59],$Vu=[1,57],$Vv=[1,62],$Vw=[1,63],$Vx=[1,64],$Vy=[1,65],$Vz=[1,66],$VA=[1,67],$VB=[1,68],$VC=[1,69],$VD=[1,70],$VE=[1,71],$VF=[1,72],$VG=[1,73],$VH=[1,74],$VI=[1,75],$VJ=[11,20,41,42,43,44,45,46,51,52,53,54,55,56,57,58],$VK=[2,52],$VL=[2,71],$VM=[9,13,15,17,22,23,25,27,28,30,31,35,37,38,39,40],$VN=[41,42,43,44,45,46,51,52,53,54,55,56,57,58],$VO=[11,20,41,42,51,52,53,54,55,56,57,58],$VP=[11,20,41,42,43,44,51,52,53,54,55,56,57,58],$VQ=[11,20,51,52,57,58],$VR=[11,20,51,52,53,54,55,56,57,58],$VS=[1,167];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"programa":3,"sentencias":4,"EOF":5,"sentencia":6,"instruccion":7,"separador":8,"NEWLINE":9,"declaracion":10,";":11,"asignaciones":12,"IMPRIMIRLN":13,"expresion":14,"IMPRIMIR":15,"incdec":16,"IF":17,"(":18,"expresionBol":19,")":20,"{":21,"}":22,"ID":23,"ELSE":24,"FOR":25,"decNum":26,"WHILE":27,"DO":28,"DOWHILE":29,"PROCED":30,"EJECUTAR":31,"INC":32,"DEC":33,"ASIG":34,"TIPO_DECIMAL":35,"CONVALOR":36,"TIPO_CADENA":37,"TIPO_CHAR":38,"TIPO_BOOL":39,"TIPO_ENTERO":40,"+":41,"-":42,"*":43,"/":44,"^":45,"%":46,"tipoDato":47,"TOLOWER":48,"TOUPPER":49,"variable":50,">":51,"<":52,"==":53,"!=":54,">=":55,"<=":56,"&&":57,"||":58,"!":59,"booleano":60,"NUMERO":61,"CADENA":62,"DECIMAL":63,"CHAR":64,"TRUE":65,"FALSE":66,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"NEWLINE",11:";",13:"IMPRIMIRLN",15:"IMPRIMIR",17:"IF",18:"(",20:")",21:"{",22:"}",23:"ID",24:"ELSE",25:"FOR",27:"WHILE",28:"DO",29:"DOWHILE",30:"PROCED",31:"EJECUTAR",32:"INC",33:"DEC",34:"ASIG",35:"TIPO_DECIMAL",36:"CONVALOR",37:"TIPO_CADENA",38:"TIPO_CHAR",39:"TIPO_BOOL",40:"TIPO_ENTERO",41:"+",42:"-",43:"*",44:"/",45:"^",46:"%",48:"TOLOWER",49:"TOUPPER",51:">",52:"<",53:"==",54:"!=",55:">=",56:"<=",57:"&&",58:"||",59:"!",61:"NUMERO",62:"CADENA",63:"DECIMAL",64:"CHAR",65:"TRUE",66:"FALSE"},
productions_: [0,[3,2],[4,2],[4,0],[6,2],[6,1],[8,1],[7,2],[7,2],[7,3],[7,3],[7,2],[7,7],[7,7],[7,11],[7,11],[7,11],[7,11],[7,7],[7,7],[7,8],[7,8],[7,7],[7,5],[16,2],[16,2],[12,3],[10,1],[10,2],[10,4],[10,4],[10,2],[10,4],[10,4],[10,2],[10,4],[10,4],[10,2],[10,4],[10,4],[26,2],[26,4],[26,4],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,4],[14,4],[14,4],[14,1],[14,1],[14,1],[47,1],[47,1],[47,1],[47,1],[47,1],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,1],[50,1],[50,1],[50,1],[50,1],[50,1],[60,1],[60,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 
          if ($$[$0] !== null) {
            this.$ = $$[$0-1].concat([$$[$0]]); 
          } else {
            this.$ = $$[$0-1];
          }
        
break;
case 3:
 this.$ = []; 
break;
case 4:
 this.$ = $$[$0-1]; 
break;
case 5:
 this.$ = null; 
break;
case 9:
 this.$ = { tipo: 'IMPRIMIRLN', valor: $$[$0-1] }; 
break;
case 10:
 this.$ = { tipo: 'IMPRIMIR', valor: $$[$0-1] }; 
break;
case 12:

        this.$ = {
            tipo: 'IF',
            condicion: $$[$0-4],
            cuerpo: $$[$0-1]
        };
    
break;
case 13:

        this.$ = {
            tipo: 'IF2',
            condicion: $$[$0-4],
            cuerpo: $$[$0-1]
        };
    
break;
case 14:

        this.$ = {
            tipo: 'IF_ELSE',
            condicion: $$[$0-8],
            cuerpoVerdadero: $$[$0-5],
            cuerpoFalso: $$[$0-1]
        };
    
break;
case 15:

        this.$ = {
            tipo: 'IF_ELSE2',
            condicion: $$[$0-8],
            cuerpoVerdadero: $$[$0-5],
            cuerpoFalso: $$[$0-1]
        };
    
break;
case 16:

        this.$ = {
            tipo: 'FOR1',
            declaracion: $$[$0-8],
            condicion: $$[$0-6],
            act: $$[$0-4],
            cuerpo: $$[$0-1]
        };
    
break;
case 17:

        this.$ = {
            tipo: 'FOR2',
            asignacion: $$[$0-8],
            condicion: $$[$0-6],
            act: $$[$0-4],
            cuerpo: $$[$0-1]
        };        
    
break;
case 18:

        this.$ = {
            tipo: 'WHILE',
            condicion: $$[$0-4],
            cuerpo: $$[$0-1]
        };        
    
break;
case 19:

        this.$ = {
            tipo: 'WHILE2',
            condicion: $$[$0-4],
            cuerpo: $$[$0-1]
        };        
    
break;
case 20:

        this.$ = {
            tipo: 'DOWHILE',
            condicion: $$[$0-1],
            cuerpo: $$[$0-5]
        };        
    
break;
case 21:

        this.$ = {
            tipo: 'DOWHILE2',
            condicion: $$[$0-1],
            cuerpo: $$[$0-5]
        };        
    
break;
case 22:

        this.$ = {
            tipo: 'PROCED',
            id: $$[$0-5],
            cuerpo: $$[$0-1]
        };        
    
break;
case 23:
 this.$ = { tipo: 'EJECUTAR', nombre: $$[$0-3]}; 
break;
case 24:
 this.$ = { tipo: 'INC', nombre: $$[$0-1]}; 
break;
case 25:
 this.$ = { tipo: 'DEC', nombre: $$[$0-1]}; 
break;
case 26:
 this.$ = { tipo: 'ASIGNACION', id: $$[$0-2], valor: $$[$0] }; 
break;
case 28:
 this.$ = { tipo: 'DECLARACION2', id: $$[$0], tipoDato: 'Decimal', valor: 0.0 }; 
break;
case 29:
 this.$ = { tipo: 'DECLARACION', id: $$[$0-2], tipoDato: 'Decimal', valor: $$[$0]}; 
break;
case 30:
 this.$ = { tipo: 'DECLARACION', id: $$[$0-2], tipoDato: 'Decimal', valor: $$[$0] }; 
break;
case 31:
 this.$ = { tipo: 'DECLARACION2', id: $$[$0], tipoDato: 'Cadena', valor: ""}; 
break;
case 32: case 33:
 this.$ = { tipo: 'DECLARACION', id: $$[$0-2], tipoDato: 'Cadena', valor: $$[$0]}; 
break;
case 34:
 this.$ = { tipo: 'DECLARACION2', id: $$[$0], tipoDato: 'Caracter', valor: ''}; 
break;
case 35:
 this.$ = { tipo: 'DECLARACION', id: $$[$0-2], tipoDato: 'Caracter', valor: $$[$0]}; 
break;
case 36:
 this.$ = { tipo: 'DECLARACION', id: $$[$0-2], tipoDato: 'Caracter', valor: $$[$0] }; 
break;
case 37:
 this.$ = { tipo: 'DECLARACION2', id: $$[$0], tipoDato: 'Booleano', valor: true }; 
break;
case 38:
 this.$ = { tipo: 'DECLARACION', id: $$[$0-2], tipoDato: 'Booleano', valor: $$[$0]}; 
break;
case 39:
 this.$ = { tipo: 'DECLARACION', id: $$[$0-2], tipoDato: 'Booleano', valor: $$[$0] }; 
break;
case 40:
 this.$ = { tipo: 'DECLARACION2', id: $$[$0], tipoDato: 'Entero', valor: 0 }; 
break;
case 41:
 this.$ = { tipo: 'DECLARACION', id: $$[$0-2], tipoDato: 'Entero', valor: $$[$0] };  
break;
case 42:
 this.$ = { tipo: 'DECLARACION', id: $$[$0-2], tipoDato: 'Entero', valor: $$[$0] }; 
break;
case 43:
 this.$ = { tipo: 'SUMA', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 44:
 this.$ = { tipo: 'RESTA', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 45:
 this.$ = { tipo: 'MULTIPLICACION', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 46:
 this.$ = { tipo: 'DIVISION', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 47:
 this.$ = { tipo: 'POTENCIA', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 48:
 this.$ = { tipo: 'MODULO', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 49:
 this.$ = { tipo: 'CASTEO', derecha: $$[$0], cast: $$[$0-2]}; 
break;
case 50:
 this.$ = { tipo: 'TOLOWER', derecha: $$[$0-1]}; 
break;
case 51:
 this.$ = { tipo: 'TOUPPER', derecha: $$[$0-1]}; 
break;
case 52: case 53: case 69:
 this.$ = $$[$0];
break;
case 60:
 this.$ = { tipo: 'MAYORQUE', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 61:
 this.$ = { tipo: 'MENORQUE', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 62:
 this.$ = { tipo: 'IGUAL', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 63:
 this.$ = { tipo: 'NOIGUAL', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 64:
 this.$ = { tipo: 'MAYORIGUAL', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 65:
 this.$ = { tipo: 'MENORIGUAL', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 66:
 this.$ = { tipo: 'AND', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 67:
 this.$ = { tipo: 'OR', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 68:
 this.$ = { tipo: 'NOT', nombre: $$[$0] }; 
break;
case 70:
 this.$ = { tipo: 'NUMERO', valor: Number($$[$0]) }; 
break;
case 71:
 this.$ = { tipo: 'ID', nombre: $$[$0]}; 
break;
case 72:
 this.$ = { tipo: 'CADENA', valor: $$[$0].slice(1, -1) }; 
break;
case 73:
 this.$ = { tipo: 'DECIMAL', valor: Number($$[$0]) }; 
break;
case 74:
 this.$ = { tipo: 'CHAR', valor: $$[$0].slice(1, -1) }; 
break;
case 75:
 this.$ = { tipo: 'BOOL', valor: true }; 
break;
case 76:
 this.$ = { tipo: 'BOOL', valor: false }; 
break;
}
},
table: [o([5,9,13,15,17,23,25,27,28,30,31,35,37,38,39,40],$V0,{3:1,4:2}),{1:[3]},{5:[1,3],6:4,7:5,8:6,9:$V1,10:7,12:8,13:$V2,15:$V3,16:11,17:$V4,23:$V5,25:$V6,26:19,27:$V7,28:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,38:$Vd,39:$Ve,40:$Vf},{1:[2,1]},o($Vg,[2,2]),{8:26,9:$V1},o($Vg,[2,5]),{11:[1,27]},{11:[1,28]},{14:29,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{14:45,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{11:[1,46]},{18:[1,47]},{18:[1,48]},{18:[1,49]},{21:[1,50]},{23:[1,51]},{23:[1,52]},o($Vg,[2,6]),{11:[2,27]},{23:[1,53]},{23:[1,54]},{23:[1,55]},{23:[1,56]},{32:$Vs,33:$Vt,34:$Vu},{23:[1,60]},o($Vg,[2,4]),{9:[2,7]},{9:[2,8]},{11:[1,61],41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},{35:[1,81],37:[1,78],38:[1,79],39:[1,77],40:[1,80],47:76},{18:[1,82]},{18:[1,83]},o($VJ,$VK),o($VJ,[2,53]),o($VJ,[2,54]),{23:[1,84]},o($VJ,[2,69]),o($VJ,[2,70]),o($VJ,$VL,{32:$Vs,33:$Vt}),o($VJ,[2,72]),o($VJ,[2,73]),o($VJ,[2,74]),o($VJ,[2,75]),o($VJ,[2,76]),{11:[1,85],41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},{9:[2,11]},{14:88,16:35,18:$Vh,19:86,23:[1,87],48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{12:90,23:[1,91],26:89,40:$Vf},{14:88,16:35,18:$Vh,19:92,23:[1,93],48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},o($VM,$V0,{4:94}),{18:[1,95]},{18:[1,96]},{11:[2,28],34:[1,98],36:[1,97]},{11:[2,31],34:[1,100],36:[1,99]},{11:[2,34],34:[1,102],36:[1,101]},{11:[2,37],34:[1,104],36:[1,103]},{14:105,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},o($VJ,[2,24]),o($VJ,[2,25]),{11:[2,40],34:[1,107],36:[1,106]},{9:[2,9]},{14:108,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{14:109,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{14:110,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{14:111,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{14:112,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{14:113,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{14:114,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{14:115,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{14:116,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{14:117,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{14:118,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{14:119,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{14:120,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{14:121,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{20:[1,122]},{20:[2,55]},{20:[2,56]},{20:[2,57]},{20:[2,58]},{20:[2,59]},{14:123,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{14:124,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},o($VJ,[2,68]),{9:[2,10]},o($VN,$VK,{20:[1,125]}),o($VN,$VL,{20:[1,126],32:$Vs,33:$Vt}),{41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},{11:[1,127]},{11:[1,128]},{34:$Vu},o($VN,$VK,{20:[1,129]}),o($VN,$VL,{20:[1,130],32:$Vs,33:$Vt}),{6:4,7:5,8:6,9:$V1,10:7,12:8,13:$V2,15:$V3,16:11,17:$V4,22:[1,131],23:$V5,25:$V6,26:19,27:$V7,28:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,38:$Vd,39:$Ve,40:$Vf},{20:[1,132]},{20:[1,133]},{14:134,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{14:135,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{14:136,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{14:137,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{14:138,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{14:139,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{14:140,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{14:141,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{11:[2,26],41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},{14:142,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{14:143,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},o($VO,[2,43],{43:$Vx,44:$Vy,45:$Vz,46:$VA}),o($VO,[2,44],{43:$Vx,44:$Vy,45:$Vz,46:$VA}),o($VP,[2,45],{45:$Vz,46:$VA}),o($VP,[2,46],{45:$Vz,46:$VA}),o($VJ,[2,47]),o($VJ,[2,48]),o($VQ,[2,60],{41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,53:$VD,54:$VE,55:$VF,56:$VG}),o($VQ,[2,61],{41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,53:$VD,54:$VE,55:$VF,56:$VG}),o($VR,[2,62],{41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA}),o($VR,[2,63],{41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA}),o($VR,[2,64],{41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA}),o($VR,[2,65],{41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA}),o([11,20,57,58],[2,66],{41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG}),o([11,20,58],[2,67],{41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH}),{14:144,16:35,18:$Vh,19:33,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{20:[1,145],41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},{20:[1,146],41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},{21:[1,147]},{21:[1,148]},{14:88,16:35,18:$Vh,19:149,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{14:88,16:35,18:$Vh,19:150,23:$Vi,48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{21:[1,151]},{21:[1,152]},{29:[1,153]},{21:[1,154]},{11:[1,155]},{11:[2,29],41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},{11:[2,30],41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},{11:[2,32],41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},{11:[2,33],41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},{11:[2,35],41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},{11:[2,36],41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},{11:[2,38],41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},{11:[2,39],41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},{11:[2,41],41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},{11:[2,42],41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA,51:$VB,52:$VC,53:$VD,54:$VE,55:$VF,56:$VG,57:$VH,58:$VI},o($VR,[2,49],{41:$Vv,42:$Vw,43:$Vx,44:$Vy,45:$Vz,46:$VA}),o($VJ,[2,50]),o($VJ,[2,51]),o($VM,$V0,{4:156}),o($VM,$V0,{4:157}),o($VN,$VK,{11:[1,158]}),o($VN,$VK,{11:[1,159]}),o($VM,$V0,{4:160}),o($VM,$V0,{4:161}),{18:[1,162]},o($VM,$V0,{4:163}),{9:[2,23]},{6:4,7:5,8:6,9:$V1,10:7,12:8,13:$V2,15:$V3,16:11,17:$V4,22:[1,164],23:$V5,25:$V6,26:19,27:$V7,28:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,38:$Vd,39:$Ve,40:$Vf},{6:4,7:5,8:6,9:$V1,10:7,12:8,13:$V2,15:$V3,16:11,17:$V4,22:[1,165],23:$V5,25:$V6,26:19,27:$V7,28:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,38:$Vd,39:$Ve,40:$Vf},{16:166,23:$VS},{16:168,23:$VS},{6:4,7:5,8:6,9:$V1,10:7,12:8,13:$V2,15:$V3,16:11,17:$V4,22:[1,169],23:$V5,25:$V6,26:19,27:$V7,28:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,38:$Vd,39:$Ve,40:$Vf},{6:4,7:5,8:6,9:$V1,10:7,12:8,13:$V2,15:$V3,16:11,17:$V4,22:[1,170],23:$V5,25:$V6,26:19,27:$V7,28:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,38:$Vd,39:$Ve,40:$Vf},{14:88,16:35,18:$Vh,19:171,23:[1,172],48:$Vj,49:$Vk,50:34,59:$Vl,60:37,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{6:4,7:5,8:6,9:$V1,10:7,12:8,13:$V2,15:$V3,16:11,17:$V4,22:[1,173],23:$V5,25:$V6,26:19,27:$V7,28:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,38:$Vd,39:$Ve,40:$Vf},{9:[2,12],24:[1,174]},{9:[2,13],24:[1,175]},{20:[1,176]},{32:$Vs,33:$Vt},{20:[1,177]},{9:[2,18]},{9:[2,19]},o($VN,$VK,{20:[1,178]}),o($VN,$VL,{20:[1,179],32:$Vs,33:$Vt}),{9:[2,22]},{21:[1,180]},{21:[1,181]},{21:[1,182]},{21:[1,183]},{9:[2,20]},{9:[2,21]},o($VM,$V0,{4:184}),o($VM,$V0,{4:185}),o($VM,$V0,{4:186}),o($VM,$V0,{4:187}),{6:4,7:5,8:6,9:$V1,10:7,12:8,13:$V2,15:$V3,16:11,17:$V4,22:[1,188],23:$V5,25:$V6,26:19,27:$V7,28:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,38:$Vd,39:$Ve,40:$Vf},{6:4,7:5,8:6,9:$V1,10:7,12:8,13:$V2,15:$V3,16:11,17:$V4,22:[1,189],23:$V5,25:$V6,26:19,27:$V7,28:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,38:$Vd,39:$Ve,40:$Vf},{6:4,7:5,8:6,9:$V1,10:7,12:8,13:$V2,15:$V3,16:11,17:$V4,22:[1,190],23:$V5,25:$V6,26:19,27:$V7,28:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,38:$Vd,39:$Ve,40:$Vf},{6:4,7:5,8:6,9:$V1,10:7,12:8,13:$V2,15:$V3,16:11,17:$V4,22:[1,191],23:$V5,25:$V6,26:19,27:$V7,28:$V8,30:$V9,31:$Va,35:$Vb,37:$Vc,38:$Vd,39:$Ve,40:$Vf},{9:[2,14]},{9:[2,15]},{9:[2,16]},{9:[2,17]}],
defaultActions: {3:[2,1],19:[2,27],27:[2,7],28:[2,8],46:[2,11],61:[2,9],77:[2,55],78:[2,56],79:[2,57],80:[2,58],81:[2,59],85:[2,10],155:[2,23],169:[2,18],170:[2,19],173:[2,22],178:[2,20],179:[2,21],188:[2,14],189:[2,15],190:[2,16],191:[2,17]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip horizontal whitespace */
break;
case 1:return 9;
break;
case 2:return 'INGRESAR';
break;
case 3:return 'COMO';
break;
case 4:return 36;
break;
case 5:return 40;
break;
case 6:return 37;
break;
case 7:return 39;  
break;
case 8:return 65;
break;
case 9:return 66;
break;
case 10:return 13;    
break;
case 11:return 15;
break;
case 12:return 35;
break;
case 13:return 38;
break;
case 14:return 17;
break;
case 15:return 25;
break;
case 16:return 27;
break;
case 17:return 28;
break;
case 18:return 29;     
break;
case 19:return 24;
break;
case 20:return 48;
break;
case 21:return 49;
break;
case 22:return 30;
break;
case 23:return 31;  
break;
case 24:return 63;
break;
case 25:return 61;
break;
case 26:return 62;
break;
case 27:return 64;
break;
case 28:return 23;
break;
case 29:return 58;
break;
case 30:return 57;
break;
case 31:return 54;
break;
case 32:return 59;        
break;
case 33:return 55;  
break;
case 34:return 51;
break;
case 35:return 56;  
break;
case 36:return 52;
break;
case 37:return 46;
break;
case 38:return 32;  
break;
case 39:return 41;
break;
case 40:return 33;  
break;
case 41:return 42;
break;
case 42:return 53;
break;
case 43:return ',';  
break;
case 44:return 34;
break;
case 45:return 43;
break;
case 46:return 44;
break;
case 47:return 45;
break;
case 48:return 46;  
break;
case 49:return 11;
break;
case 50:return 18;
break;
case 51:return 20;
break;
case 52:return 21;
break;
case 53:return 22;     
break;
case 54:return 5;
break;
case 55:
    console.error(`Carácter no reconocido: '${yy_.yytext}'`);
    return 'INVALIDO'; 

break;
}
},
rules: [/^(?:[ \t\r]+)/,/^(?:\n)/,/^(?:ingresar\b)/,/^(?:como\b)/,/^(?:con valor\b)/,/^(?:Entero\b)/,/^(?:Cadena\b)/,/^(?:Booleano\b)/,/^(?:Verdadero\b)/,/^(?:Falso\b)/,/^(?:imprimir ln\b)/,/^(?:imprimir\b)/,/^(?:Decimal\b)/,/^(?:Caracter\b)/,/^(?:si\b)/,/^(?:para\b)/,/^(?:mientras\b)/,/^(?:hacer\b)/,/^(?:hasta que\b)/,/^(?:de lo contrario\b)/,/^(?:tolower\b)/,/^(?:toupper\b)/,/^(?:procedimiento\b)/,/^(?:ejecutar\b)/,/^(?:([0-9]+\.[0-9]*|\.[0-9]+))/,/^(?:[0-9]+)/,/^(?:"[^"]*")/,/^(?:'([^\\']|\\.)')/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!=)/,/^(?:!)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:%)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:==)/,/^(?:,)/,/^(?:=)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:;)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}