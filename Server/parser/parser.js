/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,16],$V2=[1,9],$V3=[1,10],$V4=[1,12],$V5=[1,22],$V6=[1,13],$V7=[1,14],$V8=[1,15],$V9=[1,18],$Va=[1,19],$Vb=[1,20],$Vc=[1,21],$Vd=[1,23],$Ve=[5,9,13,15,17,22,23,25,27,28,33,35,36,37,38],$Vf=[1,28],$Vg=[1,35],$Vh=[1,32],$Vi=[1,34],$Vj=[1,36],$Vk=[1,37],$Vl=[1,38],$Vm=[1,39],$Vn=[1,40],$Vo=[1,52],$Vp=[1,53],$Vq=[1,51],$Vr=[1,56],$Vs=[1,57],$Vt=[1,58],$Vu=[1,59],$Vv=[1,60],$Vw=[1,61],$Vx=[1,62],$Vy=[1,63],$Vz=[1,64],$VA=[1,65],$VB=[1,66],$VC=[1,67],$VD=[1,68],$VE=[1,69],$VF=[11,20,39,40,41,42,43,44,47,48,49,50,51,52,53,54],$VG=[2,48],$VH=[2,67],$VI=[9,13,15,17,22,23,25,27,28,33,35,36,37,38],$VJ=[39,40,41,42,43,44,47,48,49,50,51,52,53,54],$VK=[11,20,39,40,47,48,49,50,51,52,53,54],$VL=[11,20,39,40,41,42,47,48,49,50,51,52,53,54],$VM=[11,20,47,48,53,54],$VN=[11,20,47,48,49,50,51,52,53,54],$VO=[1,148];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"programa":3,"sentencias":4,"EOF":5,"sentencia":6,"instruccion":7,"separador":8,"NEWLINE":9,"declaraciones":10,";":11,"asignaciones":12,"IMPRIMIRLN":13,"expresion":14,"IMPRIMIR":15,"incdec":16,"IF":17,"(":18,"expresionBol":19,")":20,"{":21,"}":22,"ID":23,"ELSE":24,"FOR":25,"decNum":26,"WHILE":27,"DO":28,"DOWHILE":29,"INC":30,"DEC":31,"ASIG":32,"TIPO_DECIMAL":33,"CONVALOR":34,"TIPO_CADENA":35,"TIPO_CHAR":36,"TIPO_BOOL":37,"TIPO_ENTERO":38,"+":39,"-":40,"*":41,"/":42,"^":43,"%":44,"tipoDato":45,"variable":46,">":47,"<":48,"==":49,"!=":50,">=":51,"<=":52,"&&":53,"||":54,"!":55,"booleano":56,"NUMERO":57,"CADENA":58,"DECIMAL":59,"CHAR":60,"TRUE":61,"FALSE":62,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"NEWLINE",11:";",13:"IMPRIMIRLN",15:"IMPRIMIR",17:"IF",18:"(",20:")",21:"{",22:"}",23:"ID",24:"ELSE",25:"FOR",27:"WHILE",28:"DO",29:"DOWHILE",30:"INC",31:"DEC",32:"ASIG",33:"TIPO_DECIMAL",34:"CONVALOR",35:"TIPO_CADENA",36:"TIPO_CHAR",37:"TIPO_BOOL",38:"TIPO_ENTERO",39:"+",40:"-",41:"*",42:"/",43:"^",44:"%",47:">",48:"<",49:"==",50:"!=",51:">=",52:"<=",53:"&&",54:"||",55:"!",57:"NUMERO",58:"CADENA",59:"DECIMAL",60:"CHAR",61:"TRUE",62:"FALSE"},
productions_: [0,[3,2],[4,2],[4,0],[6,2],[6,1],[8,1],[7,2],[7,2],[7,3],[7,3],[7,2],[7,7],[7,7],[7,11],[7,11],[7,11],[7,11],[7,7],[7,7],[7,8],[7,8],[16,2],[16,2],[12,3],[10,1],[10,2],[10,4],[10,4],[10,2],[10,4],[10,4],[10,2],[10,4],[10,4],[10,2],[10,4],[10,4],[26,2],[26,4],[26,4],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,4],[14,1],[14,1],[14,1],[45,1],[45,1],[45,1],[45,1],[45,1],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,1],[46,1],[46,1],[46,1],[46,1],[46,1],[56,1],[56,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 
          if ($$[$0] !== null) {
            this.$ = $$[$0-1].concat([$$[$0]]); 
          } else {
            this.$ = $$[$0-1];
          }
        
break;
case 3:
 this.$ = []; 
break;
case 4:
 this.$ = $$[$0-1]; 
break;
case 5:
 this.$ = null; 
break;
case 9:
 this.$ = { tipo: 'IMPRIMIRLN', valor: $$[$0-1] }; 
break;
case 10:
 this.$ = { tipo: 'IMPRIMIR', valor: $$[$0-1] }; 
break;
case 12:

        this.$ = {
            tipo: 'IF',
            condicion: $$[$0-4],
            cuerpo: $$[$0-1]
        };
    
break;
case 13:

        this.$ = {
            tipo: 'IF2',
            condicion: $$[$0-4],
            cuerpo: $$[$0-1]
        };
    
break;
case 14:

        this.$ = {
            tipo: 'IF_ELSE',
            condicion: $$[$0-8],
            cuerpoVerdadero: $$[$0-5],
            cuerpoFalso: $$[$0-1]
        };
    
break;
case 15:

        this.$ = {
            tipo: 'IF_ELSE2',
            condicion: $$[$0-8],
            cuerpoVerdadero: $$[$0-5],
            cuerpoFalso: $$[$0-1]
        };
    
break;
case 16:

        this.$ = {
            tipo: 'FOR1',
            declaracion: $$[$0-8],
            condicion: $$[$0-6],
            act: $$[$0-4],
            cuerpo: $$[$0-1]
        };
    
break;
case 17:

        this.$ = {
            tipo: 'FOR2',
            asignacion: $$[$0-8],
            condicion: $$[$0-6],
            act: $$[$0-4],
            cuerpo: $$[$0-1]
        };        
    
break;
case 18:

        this.$ = {
            tipo: 'WHILE',
            condicion: $$[$0-4],
            cuerpo: $$[$0-1]
        };        
    
break;
case 19:

        this.$ = {
            tipo: 'WHILE2',
            condicion: $$[$0-4],
            cuerpo: $$[$0-1]
        };        
    
break;
case 20:

        this.$ = {
            tipo: 'DOWHILE',
            condicion: $$[$0-1],
            cuerpo: $$[$0-5]
        };        
    
break;
case 21:

        this.$ = {
            tipo: 'DOWHILE2',
            condicion: $$[$0-1],
            cuerpo: $$[$0-5]
        };        
    
break;
case 22:
 this.$ = { tipo: 'INC', nombre: $$[$0-1]}; 
break;
case 23:
 this.$ = { tipo: 'DEC', nombre: $$[$0-1]}; 
break;
case 24:
 this.$ = { tipo: 'ASIGNACION', id: $$[$0-2], valor: $$[$0] }; 
break;
case 26:
 this.$ = { tipo: 'DECLARACION2', id: $$[$0], tipoDato: 'Decimal', valor: 0.0 }; 
break;
case 27:
 this.$ = { tipo: 'DECLARACION', id: $$[$0-2], tipoDato: 'Decimal', valor: $$[$0]}; 
break;
case 28:
 this.$ = { tipo: 'DECLARACION', id: $$[$0-2], tipoDato: 'Decimal', valor: $$[$0] }; 
break;
case 29:
 this.$ = { tipo: 'DECLARACION2', id: $$[$0], tipoDato: 'Cadena', valor: ""}; 
break;
case 30: case 31:
 this.$ = { tipo: 'DECLARACION', id: $$[$0-2], tipoDato: 'Cadena', valor: $$[$0]}; 
break;
case 32:
 this.$ = { tipo: 'DECLARACION2', id: $$[$0], tipoDato: 'Caracter', valor: ''}; 
break;
case 33:
 this.$ = { tipo: 'DECLARACION', id: $$[$0-2], tipoDato: 'Caracter', valor: $$[$0]}; 
break;
case 34:
 this.$ = { tipo: 'DECLARACION', id: $$[$0-2], tipoDato: 'Caracter', valor: $$[$0] }; 
break;
case 35:
 this.$ = { tipo: 'DECLARACION2', id: $$[$0], tipoDato: 'Booleano', valor: true }; 
break;
case 36:
 this.$ = { tipo: 'DECLARACION', id: $$[$0-2], tipoDato: 'Booleano', valor: $$[$0]}; 
break;
case 37:
 this.$ = { tipo: 'DECLARACION', id: $$[$0-2], tipoDato: 'Booleano', valor: $$[$0] }; 
break;
case 38:
 this.$ = { tipo: 'DECLARACION2', id: $$[$0], tipoDato: 'Entero', valor: 0 }; 
break;
case 39:
 this.$ = { tipo: 'DECLARACION', id: $$[$0-2], tipoDato: 'Entero', valor: $$[$0] };  
break;
case 40:
 this.$ = { tipo: 'DECLARACION', id: $$[$0-2], tipoDato: 'Entero', valor: $$[$0] }; 
break;
case 41:
 this.$ = { tipo: 'SUMA', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 42:
 this.$ = { tipo: 'RESTA', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 43:
 this.$ = { tipo: 'MULTIPLICACION', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 44:
 this.$ = { tipo: 'DIVISION', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 45:
 this.$ = { tipo: 'POTENCIA', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 46:
 this.$ = { tipo: 'MODULO', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 47:
 this.$ = { tipo: 'CASTEO', derecha: $$[$0], cast: $$[$0-2]}; 
break;
case 48: case 49: case 65:
 this.$ = $$[$0];
break;
case 56:
 this.$ = { tipo: 'MAYORQUE', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 57:
 this.$ = { tipo: 'MENORQUE', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 58:
 this.$ = { tipo: 'IGUAL', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 59:
 this.$ = { tipo: 'NOIGUAL', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 60:
 this.$ = { tipo: 'MAYORIGUAL', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 61:
 this.$ = { tipo: 'MENORIGUAL', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 62:
 this.$ = { tipo: 'AND', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 63:
 this.$ = { tipo: 'OR', izquierda: $$[$0-2], derecha: $$[$0] }; 
break;
case 64:
 this.$ = { tipo: 'NOT', nombre: $$[$0] }; 
break;
case 66:
 this.$ = { tipo: 'NUMERO', valor: Number($$[$0]) }; 
break;
case 67:
 this.$ = { tipo: 'ID', nombre: $$[$0]}; 
break;
case 68:
 this.$ = { tipo: 'CADENA', valor: $$[$0].slice(1, -1) }; 
break;
case 69:
 this.$ = { tipo: 'DECIMAL', valor: Number($$[$0]) }; 
break;
case 70:
 this.$ = { tipo: 'CHAR', valor: $$[$0].slice(1, -1) }; 
break;
case 71:
 this.$ = { tipo: 'BOOL', valor: true }; 
break;
case 72:
 this.$ = { tipo: 'BOOL', valor: false }; 
break;
}
},
table: [o([5,9,13,15,17,23,25,27,28,33,35,36,37,38],$V0,{3:1,4:2}),{1:[3]},{5:[1,3],6:4,7:5,8:6,9:$V1,10:7,12:8,13:$V2,15:$V3,16:11,17:$V4,23:$V5,25:$V6,26:17,27:$V7,28:$V8,33:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd},{1:[2,1]},o($Ve,[2,2]),{8:24,9:$V1},o($Ve,[2,5]),{11:[1,25]},{11:[1,26]},{14:27,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{14:41,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{11:[1,42]},{18:[1,43]},{18:[1,44]},{18:[1,45]},{21:[1,46]},o($Ve,[2,6]),{11:[2,25]},{23:[1,47]},{23:[1,48]},{23:[1,49]},{23:[1,50]},{30:$Vo,31:$Vp,32:$Vq},{23:[1,54]},o($Ve,[2,4]),{9:[2,7]},{9:[2,8]},{11:[1,55],39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE},{33:[1,75],35:[1,72],36:[1,73],37:[1,71],38:[1,74],45:70},o($VF,$VG),o($VF,[2,49]),o($VF,[2,50]),{23:[1,76]},o($VF,[2,65]),o($VF,[2,66]),o($VF,$VH,{30:$Vo,31:$Vp}),o($VF,[2,68]),o($VF,[2,69]),o($VF,[2,70]),o($VF,[2,71]),o($VF,[2,72]),{11:[1,77],39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE},{9:[2,11]},{14:80,16:31,18:$Vf,19:78,23:[1,79],46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{12:82,23:[1,83],26:81,38:$Vd},{14:80,16:31,18:$Vf,19:84,23:[1,85],46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},o($VI,$V0,{4:86}),{11:[2,26],32:[1,88],34:[1,87]},{11:[2,29],32:[1,90],34:[1,89]},{11:[2,32],32:[1,92],34:[1,91]},{11:[2,35],32:[1,94],34:[1,93]},{14:95,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},o($VF,[2,22]),o($VF,[2,23]),{11:[2,38],32:[1,97],34:[1,96]},{9:[2,9]},{14:98,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{14:99,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{14:100,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{14:101,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{14:102,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{14:103,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{14:104,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{14:105,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{14:106,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{14:107,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{14:108,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{14:109,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{14:110,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{14:111,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{20:[1,112]},{20:[2,51]},{20:[2,52]},{20:[2,53]},{20:[2,54]},{20:[2,55]},o($VF,[2,64]),{9:[2,10]},o($VJ,$VG,{20:[1,113]}),o($VJ,$VH,{20:[1,114],30:$Vo,31:$Vp}),{39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE},{11:[1,115]},{11:[1,116]},{32:$Vq},o($VJ,$VG,{20:[1,117]}),o($VJ,$VH,{20:[1,118],30:$Vo,31:$Vp}),{6:4,7:5,8:6,9:$V1,10:7,12:8,13:$V2,15:$V3,16:11,17:$V4,22:[1,119],23:$V5,25:$V6,26:17,27:$V7,28:$V8,33:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd},{14:120,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{14:121,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{14:122,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{14:123,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{14:124,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{14:125,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{14:126,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{14:127,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{11:[2,24],39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE},{14:128,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{14:129,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},o($VK,[2,41],{41:$Vt,42:$Vu,43:$Vv,44:$Vw}),o($VK,[2,42],{41:$Vt,42:$Vu,43:$Vv,44:$Vw}),o($VL,[2,43],{43:$Vv,44:$Vw}),o($VL,[2,44],{43:$Vv,44:$Vw}),o($VF,[2,45]),o($VF,[2,46]),o($VM,[2,56],{39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,49:$Vz,50:$VA,51:$VB,52:$VC}),o($VM,[2,57],{39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,49:$Vz,50:$VA,51:$VB,52:$VC}),o($VN,[2,58],{39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw}),o($VN,[2,59],{39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw}),o($VN,[2,60],{39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw}),o($VN,[2,61],{39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw}),o([11,20,53,54],[2,62],{39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC}),o([11,20,54],[2,63],{39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD}),{14:130,16:31,18:$Vf,19:29,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{21:[1,131]},{21:[1,132]},{14:80,16:31,18:$Vf,19:133,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{14:80,16:31,18:$Vf,19:134,23:$Vg,46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{21:[1,135]},{21:[1,136]},{29:[1,137]},{11:[2,27],39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE},{11:[2,28],39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE},{11:[2,30],39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE},{11:[2,31],39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE},{11:[2,33],39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE},{11:[2,34],39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE},{11:[2,36],39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE},{11:[2,37],39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE},{11:[2,39],39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE},{11:[2,40],39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,52:$VC,53:$VD,54:$VE},o($VN,[2,47],{39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw}),o($VI,$V0,{4:138}),o($VI,$V0,{4:139}),o($VJ,$VG,{11:[1,140]}),o($VJ,$VG,{11:[1,141]}),o($VI,$V0,{4:142}),o($VI,$V0,{4:143}),{18:[1,144]},{6:4,7:5,8:6,9:$V1,10:7,12:8,13:$V2,15:$V3,16:11,17:$V4,22:[1,145],23:$V5,25:$V6,26:17,27:$V7,28:$V8,33:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd},{6:4,7:5,8:6,9:$V1,10:7,12:8,13:$V2,15:$V3,16:11,17:$V4,22:[1,146],23:$V5,25:$V6,26:17,27:$V7,28:$V8,33:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd},{16:147,23:$VO},{16:149,23:$VO},{6:4,7:5,8:6,9:$V1,10:7,12:8,13:$V2,15:$V3,16:11,17:$V4,22:[1,150],23:$V5,25:$V6,26:17,27:$V7,28:$V8,33:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd},{6:4,7:5,8:6,9:$V1,10:7,12:8,13:$V2,15:$V3,16:11,17:$V4,22:[1,151],23:$V5,25:$V6,26:17,27:$V7,28:$V8,33:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd},{14:80,16:31,18:$Vf,19:152,23:[1,153],46:30,55:$Vh,56:33,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn},{9:[2,12],24:[1,154]},{9:[2,13],24:[1,155]},{20:[1,156]},{30:$Vo,31:$Vp},{20:[1,157]},{9:[2,18]},{9:[2,19]},o($VJ,$VG,{20:[1,158]}),o($VJ,$VH,{20:[1,159],30:$Vo,31:$Vp}),{21:[1,160]},{21:[1,161]},{21:[1,162]},{21:[1,163]},{9:[2,20]},{9:[2,21]},o($VI,$V0,{4:164}),o($VI,$V0,{4:165}),o($VI,$V0,{4:166}),o($VI,$V0,{4:167}),{6:4,7:5,8:6,9:$V1,10:7,12:8,13:$V2,15:$V3,16:11,17:$V4,22:[1,168],23:$V5,25:$V6,26:17,27:$V7,28:$V8,33:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd},{6:4,7:5,8:6,9:$V1,10:7,12:8,13:$V2,15:$V3,16:11,17:$V4,22:[1,169],23:$V5,25:$V6,26:17,27:$V7,28:$V8,33:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd},{6:4,7:5,8:6,9:$V1,10:7,12:8,13:$V2,15:$V3,16:11,17:$V4,22:[1,170],23:$V5,25:$V6,26:17,27:$V7,28:$V8,33:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd},{6:4,7:5,8:6,9:$V1,10:7,12:8,13:$V2,15:$V3,16:11,17:$V4,22:[1,171],23:$V5,25:$V6,26:17,27:$V7,28:$V8,33:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd},{9:[2,14]},{9:[2,15]},{9:[2,16]},{9:[2,17]}],
defaultActions: {3:[2,1],17:[2,25],25:[2,7],26:[2,8],42:[2,11],55:[2,9],71:[2,51],72:[2,52],73:[2,53],74:[2,54],75:[2,55],77:[2,10],150:[2,18],151:[2,19],158:[2,20],159:[2,21],168:[2,14],169:[2,15],170:[2,16],171:[2,17]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip horizontal whitespace */
break;
case 1:return 9;
break;
case 2:return 'INGRESAR';
break;
case 3:return 'COMO';
break;
case 4:return 34;
break;
case 5:return 38;
break;
case 6:return 35;
break;
case 7:return 37;  
break;
case 8:return 61;
break;
case 9:return 62;
break;
case 10:return 13;    
break;
case 11:return 15;
break;
case 12:return 33;
break;
case 13:return 36;
break;
case 14:return 17;
break;
case 15:return 25;
break;
case 16:return 27;
break;
case 17:return 28;
break;
case 18:return 29;     
break;
case 19:return 24;   
break;
case 20:return 59;
break;
case 21:return 57;
break;
case 22:return 58;
break;
case 23:return 60;
break;
case 24:return 23;
break;
case 25:return 54;
break;
case 26:return 53;
break;
case 27:return 50;
break;
case 28:return 55;        
break;
case 29:return 51;  
break;
case 30:return 47;
break;
case 31:return 52;  
break;
case 32:return 48;
break;
case 33:return 44;
break;
case 34:return 30;  
break;
case 35:return 39;
break;
case 36:return 31;  
break;
case 37:return 40;
break;
case 38:return 49; 
break;
case 39:return 32;
break;
case 40:return 41;
break;
case 41:return 42;
break;
case 42:return 43;
break;
case 43:return 44;  
break;
case 44:return 11;
break;
case 45:return 18;
break;
case 46:return 20;
break;
case 47:return 21;
break;
case 48:return 22;     
break;
case 49:return 5;
break;
case 50:
    console.error(`Carácter no reconocido: '${yy_.yytext}'`);
    return 'INVALIDO'; 

break;
}
},
rules: [/^(?:[ \t\r]+)/,/^(?:\n)/,/^(?:ingresar\b)/,/^(?:como\b)/,/^(?:con valor\b)/,/^(?:Entero\b)/,/^(?:Cadena\b)/,/^(?:Booleano\b)/,/^(?:Verdadero\b)/,/^(?:Falso\b)/,/^(?:imprimir ln\b)/,/^(?:imprimir\b)/,/^(?:Decimal\b)/,/^(?:Caracter\b)/,/^(?:si\b)/,/^(?:para\b)/,/^(?:mientras\b)/,/^(?:hacer\b)/,/^(?:hasta que\b)/,/^(?:de lo contrario\b)/,/^(?:([0-9]+\.[0-9]*|\.[0-9]+))/,/^(?:[0-9]+)/,/^(?:"[^"]*")/,/^(?:'([^\\']|\\.)')/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!=)/,/^(?:!)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:%)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:==)/,/^(?:=)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:;)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}